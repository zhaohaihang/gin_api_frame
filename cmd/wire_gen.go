// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"gin_api_frame/internal/app"
	"gin_api_frame/config"
	"gin_api_frame/internal/api/v1"
	"gin_api_frame/internal/cron"
	"gin_api_frame/internal/dao"
	"gin_api_frame/internal/http"
	"gin_api_frame/internal/routes"
	"gin_api_frame/internal/service"
	"gin_api_frame/pkg/database"
	"gin_api_frame/pkg/logger"
	"gin_api_frame/pkg/mail"
	"gin_api_frame/pkg/redis"
	"gin_api_frame/pkg/storages/qiniu"
)

// Injectors from wire.go:

func CreateApp() (*app.App, error) {
	configConfig := config.NewConfig()
	logrusLogger := logger.NewLogger()
	gormLogger := database.NewGormLogger(logrusLogger)
	databaseDatabase := database.NewDatabase(configConfig, gormLogger)
	userDao := dao.NewUserDao(databaseDatabase)
	qiNiuStroage := qiniu.NewQiNiuStroage(configConfig)
	userService := service.NewUserService(logrusLogger, userDao, qiNiuStroage)
	userController := v1.NewUserContrller(logrusLogger, userService)
	engine := routes.NewRouter(userController)
	httpServer := http.NewHttpServer(configConfig, engine)
	pool, err := mail.NewRedisPool(configConfig)
	if err != nil {
		return nil, err
	}
	tasks := cron.NewTasks(logrusLogger, userDao, pool)
	cronServer := cron.NewCronServer(tasks)
	appApp := app.NewApp(configConfig, engine, httpServer, cronServer)
	return appApp, nil
}

// wire.go:

var providerSet = wire.NewSet(app.AppProviderSet, http.HttpServerProviderSet, config.ConfigProviderSet, routes.RouterProviderSet, v1.ControllerProviderSet, service.ServiceProviderSet, database.DatabaseProviderSet, dao.DaoProviderSet, logger.LoggerProviderSet, redis.RedisPoolProviderSet, qiniu.QiNiuStroageProviderSet, cron.CronServerProviderSet, mail.MailPoolProviderSet)
